"""
Пример плагина автосохранения для Aegnux.

Этот плагин демонстрирует:
1. Работу с таймерами
2. Сохранение проектов
3. Настройки интервалов
4. Уведомления пользователя

Автор: Иван Петров
Дата: 30.10.2025
"""

import os
import time
from pathlib import Path
from datetime import datetime
from typing import Optional

from PySide6.QtCore import QTimer, Qt
from PySide6.QtWidgets import (
    QWidget, QDialog, QSpinBox, QCheckBox,
    QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QSystemTrayIcon, QMessageBox
)

from src.plugins.base import (
    ПлагинAegnux,
    ПлагинИнфо,
    СобытиеПлагина
)


class НастройкиАвтосохранения(QDialog):
    """Диалог настроек автосохранения."""
    
    def __init__(
        self,
        родитель: Optional[QWidget] = None,
        интервал: int = 300,
        уведомления: bool = True
    ):
        super().__init__(родитель)
        
        self.интервал = интервал
        self.уведомления = уведомления
        
        self.настроить_интерфейс()
        
    def настроить_интерфейс(self):
        """Создание интерфейса настроек."""
        self.setWindowTitle("Настройки автосохранения")
        компоновка = QVBoxLayout()
        
        # Настройка интервала
        интервал_группа = QHBoxLayout()
        интервал_метка = QLabel("Интервал (секунды):")
        self.интервал_ввод = QSpinBox()
        self.интервал_ввод.setRange(60, 3600)
        self.интервал_ввод.setValue(self.интервал)
        интервал_группа.addWidget(интервал_метка)
        интервал_группа.addWidget(self.интервал_ввод)
        компоновка.addLayout(интервал_группа)
        
        # Настройка уведомлений
        self.уведомления_флаг = QCheckBox("Показывать уведомления")
        self.уведомления_флаг.setChecked(self.уведомления)
        компоновка.addWidget(self.уведомления_флаг)
        
        # Кнопки
        кнопки = QHBoxLayout()
        сохранить = QPushButton("Сохранить")
        отмена = QPushButton("Отмена")
        сохранить.clicked.connect(self.accept)
        отмена.clicked.connect(self.reject)
        кнопки.addWidget(сохранить)
        кнопки.addWidget(отмена)
        компоновка.addLayout(кнопки)
        
        self.setLayout(компоновка)
        
    def получить_настройки(self) -> tuple[int, bool]:
        """Получение установленных значений."""
        return (
            self.интервал_ввод.value(),
            self.уведомления_флаг.isChecked()
        )


class АвтосохранениеПлагин(ПлагинAegnux):
    """
    Плагин для автоматического сохранения проектов.
    
    Возможности:
    - Настраиваемый интервал сохранения
    - Уведомления о сохранении
    - Резервные копии проектов
    - Статистика сохранений
    """
    
    def __init__(self):
        """Инициализация плагина автосохранения."""
        self.инфо = ПлагинИнфо(
            название="Автосохранение",
            версия="1.0.0",
            автор="Разработчик",
            описание="Автоматическое сохранение проектов After Effects"
        )
        super().__init__()
        
        # Инициализация компонентов
        self.таймер: Optional[QTimer] = None
        self.трей: Optional[QSystemTrayIcon] = None
        self.последнее_сохранение = None
        self.счетчик_сохранений = 0
        
    def подготовить(self):
        """Подготовка плагина к работе."""
        # Загружаем настройки
        self.интервал = self.настройки.get("интервал", 300)
        self.уведомления = self.настройки.get("уведомления", True)
        
        # Создаем директорию для резервных копий
        self.папка_копий = Path.home() / ".aegnux" / "backups"
        self.папка_копий.mkdir(parents=True, exist_ok=True)
        
        # Подписываемся на события
        self.подписаться_на_событие(
            СобытиеПлагина.ПОСЛЕ_ЗАПУСКА_АЕ,
            self.запустить_таймер
        )
        self.подписаться_на_событие(
            СобытиеПлагина.ПЕРЕД_ОСТАНОВКОЙ_АЕ,
            self.остановить_таймер
        )
        
        # Создаем иконку в трее
        self.настроить_трей()
        
        self.логгер.info("Плагин автосохранения подготовлен")
        
    def очистить(self):
        """Очистка ресурсов плагина."""
        self.остановить_таймер()
        if self.трей:
            self.трей.hide()
        self.сохранить_настройки()
        
    def получить_пункты_меню(self):
        """Получение пунктов меню."""
        return [
            ("Настройки автосохранения", self.показать_настройки),
            ("Статистика сохранений", self.показать_статистику)
        ]
        
    def настроить_трей(self):
        """Настройка иконки в системном трее."""
        try:
            self.трей = QSystemTrayIcon()
            self.трей.setIcon(
                self.трей.style().standardIcon(
                    self.трей.style().SP_DialogSaveButton
                )
            )
            self.трей.show()
        except Exception as e:
            self.логгер.error(f"Ошибка создания иконки в трее: {e}")
            
    def запустить_таймер(self, событие=None):
        """Запуск таймера автосохранения."""
        if not self.таймер:
            self.таймер = QTimer()
            self.таймер.timeout.connect(self.сохранить_проект)
            
        self.таймер.start(self.интервал * 1000)
        self.логгер.info(
            f"Таймер автосохранения запущен (интервал: {self.интервал} сек)"
        )
        
    def остановить_таймер(self, событие=None):
        """Остановка таймера."""
        if self.таймер and self.таймер.isActive():
            self.таймер.stop()
            self.логгер.info("Таймер автосохранения остановлен")
            
    def сохранить_проект(self):
        """Выполнение автосохранения."""
        try:
            self.логгер.info("Начало автосохранения...")
            
            # Здесь код сохранения проекта
            # ...
            
            # Обновляем статистику
            self.последнее_сохранение = datetime.now()
            self.счетчик_сохранений += 1
            
            # Показываем уведомление
            if self.уведомления and self.трей:
                self.трей.showMessage(
                    "Автосохранение",
                    "Проект успешно сохранен",
                    QSystemTrayIcon.Information,
                    2000
                )
                
            self.логгер.info("Автосохранение выполнено")
            
        except Exception as e:
            self.логгер.error(f"Ошибка автосохранения: {e}")
            if self.уведомления and self.трей:
                self.трей.showMessage(
                    "Ошибка",
                    f"Не удалось сохранить проект: {e}",
                    QSystemTrayIcon.Critical,
                    2000
                )
                
    def показать_настройки(self):
        """Отображение диалога настроек."""
        диалог = НастройкиАвтосохранения(
            интервал=self.интервал,
            уведомления=self.уведомления
        )
        
        if диалог.exec_() == QDialog.Accepted:
            # Получаем новые настройки
            self.интервал, self.уведомления = диалог.получить_настройки()
            
            # Обновляем таймер
            if self.таймер and self.таймер.isActive():
                self.остановить_таймер()
                self.запустить_таймер()
                
            # Сохраняем настройки
            self.настройки.update({
                "интервал": self.интервал,
                "уведомления": self.уведомления
            })
            
            self.логгер.info("Настройки автосохранения обновлены")
            
    def показать_статистику(self):
        """Отображение статистики сохранений."""
        последнее = (
            self.последнее_сохранение.strftime("%H:%M:%S")
            if self.последнее_сохранение
            else "нет"
        )
        
        QMessageBox.information(
            None,
            "Статистика автосохранений",
            f"""
            Всего сохранений: {self.счетчик_сохранений}
            Последнее сохранение: {последнее}
            Интервал: {self.интервал} сек
            Уведомления: {'включены' if self.уведомления else 'выключены'}
            """
        )