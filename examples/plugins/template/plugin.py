"""
Шаблон плагина для Aegnux.

Этот файл демонстрирует основные возможности плагинов
и может использоваться как основа для создания новых.

Автор: Иван Петров
Дата: 30.10.2025
"""

import os
import json
import logging
from pathlib import Path
from typing import List, Tuple, Optional

from PySide6.QtWidgets import (
    QWidget, QDialog, QPushButton,
    QVBoxLayout, QLabel, QMessageBox
)

from src.plugins.base import (
    ПлагинAegnux,
    ПлагинИнфо,
    СобытиеПлагина
)


class НастройкиДиалог(QDialog):
    """Диалог настроек плагина."""
    
    def __init__(self, родитель: Optional[QWidget] = None):
        super().__init__(родитель)
        self.настроить_интерфейс()
        
    def настроить_интерфейс(self):
        """Создание элементов интерфейса."""
        self.setWindowTitle("Настройки плагина")
        компоновка = QVBoxLayout()
        
        # Добавляем элементы управления
        метка = QLabel("Настройки плагина:")
        компоновка.addWidget(метка)
        
        кнопка = QPushButton("Сохранить")
        кнопка.clicked.connect(self.accept)
        компоновка.addWidget(кнопка)
        
        self.setLayout(компоновка)


class ШаблонПлагина(ПлагинAegnux):
    """
    Шаблон плагина с базовым функционалом.
    
    Демонстрирует:
    1. Работу с событиями
    2. Добавление пунктов меню
    3. Сохранение настроек
    4. Логирование
    5. Взаимодействие с интерфейсом
    """
    
    def __init__(self):
        """Инициализация плагина."""
        # Задаем информацию о плагине
        self.инфо = ПлагинИнфо(
            название="Шаблон плагина",
            версия="1.0.0",
            автор="Разработчик",
            описание="Базовый шаблон для создания плагинов"
        )
        super().__init__()
        
        # Инициализация переменных
        self.окно_настроек = None
        
    def подготовить(self):
        """Подготовка плагина к работе."""
        # Загружаем настройки
        self.загрузить_настройки()
        
        # Подписываемся на события
        self.подписаться_на_событие(
            СобытиеПлагина.ПОСЛЕ_ЗАПУСКА_АЕ,
            self.при_запуске_ае
        )
        
        self.подписаться_на_событие(
            СобытиеПлагина.ПЕРЕД_ОСТАНОВКОЙ_АЕ,
            self.при_остановке_ае
        )
        
        self.логгер.info("Плагин подготовлен к работе")
        
    def очистить(self):
        """Очистка ресурсов плагина."""
        # Сохраняем настройки
        self.сохранить_настройки()
        
        # Отписываемся от событий
        self.отписаться_от_события(
            СобытиеПлагина.ПОСЛЕ_ЗАПУСКА_АЕ,
            self.при_запуске_ае
        )
        
        self.отписаться_от_события(
            СобытиеПлагина.ПЕРЕД_ОСТАНОВКОЙ_АЕ,
            self.при_остановке_ае
        )
        
        self.логгер.info("Плагин завершил работу")
        
    def получить_пункты_меню(self) -> List[Tuple[str, callable]]:
        """Получение списка пунктов меню."""
        return [
            ("Настройки плагина", self.показать_настройки),
            ("О плагине", self.показать_информацию)
        ]
        
    def получить_кнопки(self) -> List[Tuple[str, str, callable]]:
        """Получение списка кнопок панели инструментов."""
        return [
            (
                "Действие",
                str(Path(__file__).parent / "assets" / "icon.png"),
                self.выполнить_действие
            )
        ]
        
    def загрузить_настройки(self):
        """Загрузка пользовательских настроек."""
        try:
            # Получаем значения с установкой по умолчанию
            self.параметр1 = self.настройки.get("параметр1", "значение1")
            self.параметр2 = self.настройки.get("параметр2", 123)
            
            self.логгер.debug(f"Загружены настройки: {self.настройки}")
            
        except Exception as e:
            self.логгер.error(f"Ошибка загрузки настроек: {e}")
            
    def сохранить_настройки(self):
        """Сохранение пользовательских настроек."""
        try:
            self.настройки.update({
                "параметр1": self.параметр1,
                "параметр2": self.параметр2
            })
            self.логгер.debug("Настройки сохранены")
            
        except Exception as e:
            self.логгер.error(f"Ошибка сохранения настроек: {e}")
            
    def показать_настройки(self):
        """Отображение диалога настроек."""
        if not self.окно_настроек:
            self.окно_настроек = НастройкиДиалог()
            
        if self.окно_настроек.exec_() == QDialog.Accepted:
            self.сохранить_настройки()
            
    def показать_информацию(self):
        """Отображение информации о плагине."""
        QMessageBox.information(
            None,
            "О плагине",
            f"""
            {self.инфо.название} v{self.инфо.версия}
            
            Автор: {self.инфо.автор}
            
            {self.инфо.описание}
            """
        )
        
    def выполнить_действие(self):
        """Пример выполнения действия."""
        try:
            self.логгер.info("Выполняем действие...")
            # Ваш код здесь
            self.логгер.info("Действие выполнено")
            
        except Exception as e:
            self.логгер.error(f"Ошибка выполнения действия: {e}")
            
    def при_запуске_ае(self, событие):
        """Обработчик запуска After Effects."""
        self.логгер.info("After Effects запущен")
        
    def при_остановке_ае(self, событие):
        """Обработчик остановки After Effects."""
        self.логгер.info("After Effects останавливается")